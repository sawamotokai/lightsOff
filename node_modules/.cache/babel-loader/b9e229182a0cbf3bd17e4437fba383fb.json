{"ast":null,"code":"import _slicedToArray from \"/Users/kaisawamoto/Desktop/projects/react_practice/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/kaisawamoto/Desktop/projects/react_practice/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kaisawamoto/Desktop/projects/react_practice/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kaisawamoto/Desktop/projects/react_practice/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kaisawamoto/Desktop/projects/react_practice/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kaisawamoto/Desktop/projects/react_practice/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    _classCallCheck(this, Board);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props)); // TODO: set initial state\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"chanceLightStartsOn\",\n    value: function chanceLightStartsOn() {\n      var bool = [true, false];\n      var idx = Math.floor(Math.random() * 2);\n      return bool[idx];\n    }\n  }, {\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = []; // TODO: create array-of-arrays of true/false values\n\n      for (var i = 0; this.props.nrows > i; i++) {\n        var arr = [];\n\n        for (var j = 0; this.props.ncols > j; j++) {\n          arr.push(this.chanceLightStartsOn());\n        }\n\n        board.push(arr);\n      }\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      } // TODO: flip this cell and the cells around it\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n\n\n      this.setState({\n        board: board,\n        hasWon: hasWon\n      });\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {// if the game is won, just show a winning msg & render nothing else\n      // TODO\n      // make table board\n      // TODO\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nexport default Board;","map":{"version":3,"sources":["/Users/kaisawamoto/Desktop/projects/react_practice/react-lights-out-starter/src/Board.js"],"names":["React","Component","Cell","Board","props","bool","idx","Math","floor","random","board","i","nrows","arr","j","ncols","push","chanceLightStartsOn","coord","state","split","map","Number","y","x","flipCell","setState","hasWon"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,aAAP;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;IA0BMC,K;;;;;AAEJ,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA,8EACXA,KADW,IAGjB;AACD;AAED;;;;;0CAEsB;AACpB,UAAIC,IAAI,GAAG,CAAC,IAAD,EAAO,KAAP,CAAX;AACA,UAAIC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAAV;AACA,aAAOJ,IAAI,CAACC,GAAD,CAAX;AACD;;;kCAEa;AACZ,UAAII,KAAK,GAAG,EAAZ,CADY,CAEZ;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgB,KAAKP,KAAL,CAAWQ,KAAX,GAAmBD,CAAnC,EAAsCA,CAAC,EAAvC,EAA0C;AACxC,YAAIE,GAAG,GAAG,EAAV;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgB,KAAKV,KAAL,CAAWW,KAAX,GAAmBD,CAAnC,EAAsCA,CAAC,EAAvC,EAA0C;AACxCD,UAAAA,GAAG,CAACG,IAAJ,CAAS,KAAKC,mBAAL,EAAT;AACD;;AACDP,QAAAA,KAAK,CAACM,IAAN,CAAWH,GAAX;AACD;;AACD,aAAOH,KAAP;AACD;AAED;;;;oCAEgBQ,K,EAAO;AAAA,wBACA,KAAKd,KADL;AAAA,UAChBW,KADgB,eAChBA,KADgB;AAAA,UACTH,KADS,eACTA,KADS;AAErB,UAAIF,KAAK,GAAG,KAAKS,KAAL,CAAWT,KAAvB;;AAFqB,6BAGRQ,KAAK,CAACE,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,CAAqBC,MAArB,CAHQ;AAAA;AAAA,UAGhBC,CAHgB;AAAA,UAGbC,CAHa;;AAMrB,eAASC,QAAT,CAAkBF,CAAlB,EAAqBC,CAArB,EAAwB;AACtB;AAEA,YAAIA,CAAC,IAAI,CAAL,IAAUA,CAAC,GAAGT,KAAd,IAAuBQ,CAAC,IAAI,CAA5B,IAAiCA,CAAC,GAAGX,KAAzC,EAAgD;AAC9CF,UAAAA,KAAK,CAACa,CAAD,CAAL,CAASC,CAAT,IAAc,CAACd,KAAK,CAACa,CAAD,CAAL,CAASC,CAAT,CAAf;AACD;AACF,OAZoB,CAcrB;AAEA;AACA;;;AAEA,WAAKE,QAAL,CAAc;AAAChB,QAAAA,KAAK,EAALA,KAAD;AAAQiB,QAAAA,MAAM,EAANA;AAAR,OAAd;AACD;AAGD;;;;6BAES,CAEP;AAEA;AAEA;AAEA;AACD;;;;EAjEiB1B,S;;AAqEpB,eAAeE,KAAf","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  \n  constructor(props) {\n    super(props);\n\n    // TODO: set initial state\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  chanceLightStartsOn() {\n    let bool = [true, false];\n    let idx = Math.floor(Math.random() * 2);\n    return bool[idx];\n  }\n\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    for (let i = 0; this.props.nrows > i; i++){\n      let arr = [];\n      for (let j = 0; this.props.ncols > j; j++){\n        arr.push(this.chanceLightStartsOn());\n      }\n      board.push(arr);\n    }\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    this.setState({board, hasWon});\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n\n    // TODO\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}