{"ast":null,"code":"import _slicedToArray from \"/Users/kaisawamoto/Desktop/projects/react_practice/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/kaisawamoto/Desktop/projects/react_practice/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kaisawamoto/Desktop/projects/react_practice/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kaisawamoto/Desktop/projects/react_practice/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kaisawamoto/Desktop/projects/react_practice/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kaisawamoto/Desktop/projects/react_practice/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kaisawamoto/Desktop/projects/react_practice/react-lights-out-starter/src/Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props)); // TODO: set initial state\n\n    _this.state = {\n      board: _this.createBoard(),\n      hasWon: false\n    };\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = []; // TODO: create array-of-arrays of true/false values\n\n      for (var i = 0; this.props.nrows > i; i++) {\n        var arr = [];\n\n        for (var j = 0; this.props.ncols > j; j++) {\n          arr.push(this.props.chanceLightStartsOn > Math.random());\n        }\n\n        board.push(arr);\n      }\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      } // TODO: flip this cell and the cells around it\n\n\n      flipCell(y - 1, x);\n      flipCell(y + 1, x);\n      flipCell(y, x - 1);\n      flipCell(y, x + 1); // win when every cell is turned off\n      // TODO: determine is the game has been won\n\n      var new_board = this.state.board;\n      this.setState({\n        new_board: new_board,\n        hasWon: hasWon\n      });\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var tableBoard = [];\n\n      for (var i = 0; i < this.props.nrows; i++) {\n        var row = [];\n\n        var _loop = function _loop(j) {\n          var coord = \"\".concat(i, \"-\").concat(j);\n          row.push(React.createElement(Cell, {\n            key: coord,\n            flipCellsAroundMe: function flipCellsAroundMe() {\n              return _this2.flipCellsAround(coord);\n            },\n            isLit: _this2.state.board[i][j],\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 104\n            },\n            __self: this\n          }));\n        };\n\n        for (var j = 0; j < this.props.ncols; j++) {\n          _loop(j);\n        }\n\n        tableBoard.push(React.createElement(\"tr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106\n          },\n          __self: this\n        }, row));\n      } // if the game is won, just show a winning msg & render nothing else\n      // TODO\n      // make table board\n\n\n      return React.createElement(\"table\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, tableBoard)); // TODO\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5,\n  chanceLightStartsOn: 0.25\n};\nexport default Board;","map":{"version":3,"sources":["/Users/kaisawamoto/Desktop/projects/react_practice/react-lights-out-starter/src/Board.js"],"names":["React","Component","Cell","Board","props","state","board","createBoard","hasWon","i","nrows","arr","j","ncols","push","chanceLightStartsOn","Math","random","coord","split","map","Number","y","x","flipCell","new_board","setState","tableBoard","row","flipCellsAround","defaultProps"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: 0.25\n  };\n\n\n  constructor(props) {\n    super(props);\n    \n\n    // TODO: set initial state\n    this.state = {\n      board: this.createBoard(),\n      hasWon: false,\n      \n    }\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    for (let i = 0; this.props.nrows > i; i++){\n      let arr = [];\n      for (let j = 0; this.props.ncols > j; j++){\n        arr.push(this.props.chanceLightStartsOn > Math.random());\n      }\n      board.push(arr);\n    }\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n    flipCell(y - 1, x);\n    flipCell(y + 1, x);\n    flipCell(y, x - 1);\n    flipCell(y, x + 1);\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    let new_board = this.state.board;\n    this.setState({new_board, hasWon});\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n    let tableBoard = [];\n    for (let i = 0; i < this.props.nrows; i++){\n      let row = [];\n      for (let j = 0; j < this.props.ncols; j++){\n        let coord = `${i}-${j}`;\n        row.push(<Cell key={coord} flipCellsAroundMe={() => this.flipCellsAround(coord)} isLit={this.state.board[i][j]} />);\n      }\n      tableBoard.push(<tr>{row}</tr>);\n\n    }\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n    return (\n      <table> \n        <tbody>\n          {tableBoard}\n        </tbody>\n      </table>\n    );\n    // TODO\n  };\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}